<?xml version="1.0"?>
<module>
	<title>App: Site</title>
	<description><![CDATA[Empty web site application as base for your projects.]]></description>
	<category>Application</category>
	<version>0.5.3</version>
	<log version="0.3.7">Added robots file and locked log folder.</log>
	<log version="0.3.8">Using new script auto load level support to load layout.css at last.</log>
	<log version="0.3.9">Adjusted .htaccess for newer Apache: strict option switches.</log>
	<log version="0.3.10">Integrated rendering of hints.</log>
	<log version="0.3.11">Added version and hook to use version to solve browser cache problems.</log>
	<log version="0.3.12">Added .htaccess to protect config folder.</log>
	<log version="0.4">Dispatching is done by hook App::onAppDispatch by now.</log>
	<log version="0.4.1">Extended master template by support for links defined in config/pages.json.</log>
	<log version="0.4.2">Extended master template by support for navigation helper for pages.</log>
	<log version="0.4.3">Updated master template to get brand from main locale.</log>
	<log version="0.4.4">Load index template by convention.</log>
	<log version="0.4.5">load index HTML files by arguments.</log>
	<log version="0.4.6">Replace file and folder class calls to use CeusMedia:Common.</log>
	<log version="0.4.7">Removed app version and public index link.</log>
	<log version="0.4.8">Add style definition for fixed table layout.</log>
	<log version="0.4.9">Enable gzip compression in .htaccess by default.</log>
	<log version="0.5">Scan for public links in pages file, if available.</log>
	<log version="0.5.1">Support module UI:LanguageSelector.</log>
	<log version="0.5.2">Extend master template by HTML blocks.</log>
	<log version="0.5.3">Support separate index HTML file for being logged in (inside).</log>
	<company site="http://ceusmedia.de/">Ceus Media</company>
	<author email="christian.wuerker@ceusmedia.de">Christian W&#xFC;rker</author>
	<files>
		<class>Controller/Index.php5</class>
		<class>View/Index.php5</class>
		<class>.htaccess</class>
		<locale>de/main.ini</locale>
		<locale>de/html/app.brand.html</locale>
		<locale>de/html/app.footer.html</locale>
		<locale>de/html/app.header.html</locale>
		<locale>en/main.ini</locale>
		<locale>en/html/app.brand.html</locale>
		<locale>en/html/app.footer.html</locale>
		<locale>en/html/app.header.html</locale>
		<locale>.htaccess</locale>
		<template>index/index.php</template>
		<template>master.php</template>
		<template>.htaccess</template>
		<style source="theme" load="auto" level="end">layout.css</style>
		<file>index.php</file>
		<file>robots.txt</file>
		<file>.htaccess.dist</file>
		<file>.htpasswd.dist</file>
		<file>config/.htaccess</file>
		<file>logs/.htaccess</file>
	</files>
	<relations>
		<needs type="module">JS_jQuery</needs>
		<needs type="module">UI_Bootstrap</needs>
		<supports type="module">Info_Contact</supports>
		<supports type="module">Info_Pages</supports>
		<supports type="module">JS_Modernizr</supports>
		<supports type="module">UI_Compressor</supports>
		<supports type="module">UI_FavIcon</supports>
		<supports type="module">UI_MetaTags</supports>
		<supports type="module">UI_LanguageSelector</supports>
		<supports type="module">UI_TEA</supports>
	</relations>
	<hook type="resource" resource="Page" event="applyModules"><![CDATA[
			$messenger	= $context->env->getMessenger();									//  shortcut messenger
			$config		= $module->config;													//  shortcut module configuration pairs
			if( !file_exists( '.htaccess' ) ){												//  .htaccess file is not existing
				if( file_exists( '.htaccess.dist' ) && file_exists( '.htpasswd.dist' ) ){	//  but default files are existing
					if( !@copy( '.htaccess.dist', '.htaccess' ) )							//  try to install default .htaccess
						throw new RuntimeException( "Cannot create .htaccess from .htaccess.dist" );
					if( !@copy( '.htpasswd.dist', '.htpasswd' ) )							//  try to install default .htpasswd
						throw new RuntimeException( "Cannot create .htpasswd from .htpasswd.dist" );
					$messenger->noteSuccess( 'Created .htaccess and .htpasswd for authentication.' );
				}
			}
	]]></hook>
	<hook type="resource" resource="Page" event="init"><![CDATA[
		$config = $env->getConfig();														//  shortcut configuration
		if( !$config->get( 'app.revision' ) ){												//  no revision set in base app configuration
			$version	= $config->get( 'module.app_site.version' );						//  get version from module App:Site
			if( version_compare( $version, 0 ) === 1 ){										//  a version (greater than 0) has been set
				$context->css->primer->setRevision( $version );								//  set version as revision on primer CSS collector
				$context->css->theme->setRevision( $version );								//  set version as revision on theme CSS collector
				$context->js->setRevision( $version );										//  set version as revision on JavaScript collector
			}
		}
	]]></hook>
	<hook type="resource" resource="Env" event="constructEnd"><![CDATA[
		if( !$env->getModules()->has( 'Resource_Authentication' ) )
			return;
		if( !file_exists( 'config/pages.json' ) )
			return;
		$acl	= $env->getAcl();
		$scopes	= json_decode( file_get_contents( 'config/pages.json' ) );
		foreach( $scopes as $scope => $pages ){
			foreach( $pages as $page ){
				//  @todo adding subpages is not stable because parent page could be not visible
				if( isset( $page->pages ) ){
					foreach( $page->pages as $subpage ){
						if( isset( $subpage->access ) ){
							$path	= isset( $subpage->link ) ? $subpage->link : $subpage->path;
							$path	= str_replace( '/', '_', $path );
							if( $subpage->access == "public" ){
								$acl->setPublicLinks( array( $path ), 'append' );
								$acl->setPublicLinks( array( $path.'_index' ), 'append' );
							}
							else if( $subpage->access == "outside" ){
								$acl->setPublicOutsideLinks( array( $path ), 'append' );
								$acl->setPublicOutsideLinks( array( $path.'_index' ), 'append' );
							}
						}
					}
				}
				if( isset( $page->access ) ){
					$path	= isset( $page->link ) ? $page->link : $page->path;
					$path	= str_replace( '/', '_', $path );
					if( $page->access == "public" ){
						$acl->setPublicLinks( array( $path ), 'append' );
						$acl->setPublicLinks( array( $path.'_index' ), 'append' );
					}
					else if( $page->access == "outside" ){
						$acl->setPublicOutsideLinks( array( $path ), 'append' );
						$acl->setPublicOutsideLinks( array( $path.'_index' ), 'append' );
					}
				}
			}
		}
]]></hook>
</module>
